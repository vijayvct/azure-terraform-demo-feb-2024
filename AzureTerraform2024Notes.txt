Terraform
---------
Hospital Management System 

Dev -> QA -> Staging -> Production -> Disaster Recovery 

An administrator will manually create the required infrastructure to run the application 

Cons:- 
------
-Time Consuming 
-Inconsistency 
-Scalibity....

Infrastructure as Code 
----------------------
Infrastructure as Code (IaC) tools allows to manage infrastructure with configuration files rather than through a GUI.
IaC allows you to build ,change and manage your infrastructure in a safe, consistent and repetable way by defining resource configurations that you can version, reuse and share 

AWS - Cloud Formation (JSON or YAML)
Azure -  ARM Templates (JSON)
GCP - Deployment Manager (YAML)

Problems with the native IaC tools 
----------------------------------
-Tools are native to the Cloud Provider, the configuration cannot be used with the other cloud 
-It does not offers state management 

Terraform 
---------
Terraform is IaC tool developed by HashiCorp
It lets you define resource and infrastructure in human readable, declarative configuration file and 'manage your infrastructure lifecycle' 

It provides following advantages over the manual process of infrastructure management 

	-Terraform can manage infrastructure on multiple cloud platforms(It is cloud agnostic)
	
	-The human-readable configuration langauge help you write the infrastructure code quickly 
		HashiCorp Configuration Language (HCL) - .tf file 
		JSON - .tf.json files
		
	-Terraform's state management allows you to track resource changes throughtout your deployment 
	
	-You can commit your configuration to version control system to safely collabrate on infrastructure
	
HashiCorp Configuration Language (HCL)

Block Syntax 

block_type "label" "name_label"{

	key1=value1,
	key2=value2,
	
	nested_block{
		key=value 
	}
}

resource "azurerm_resource_group" "myresourcegroup"{

	name="mydemo-rg"
	location="eastus"
}

resource "azurerm_storage_account" "mystorage"{
	name="terraformstorage2023"
	resource-group="name of resource-group"
	tier="Standard"
}

Terraform CLI - Open Source Tools which we can use on our system to build the infrastructure in the cloud 

Terraform Cloud - It cloud based tool to build infrastructure in cloud 

SW Requirement 
--------------
Visual Studio Code + Terraform Extension 
Azure CLI 

Terraform CLI - we can download directly from the Terrafrom site 

https://developer.hashicorp.com/terraform/install

Download the terraform binary from the above link and extract it into a folder and set the folder path in system path variable 

set path="C:\Terraform"

Extension to be installed on VS Code 
------------------------------------
HashiCorp Terraform 
Azure Terraform 

Azure CLI :- CLI tools to manage resources in Azure Cloud , We will use for authentication purpose 

Authentication
--------------
Azure CLI - az login 
Managed Service Identity 
Service Principle with Client Secret 
Service Principle with Client Certificates

Demo 1- Write a Terraform Configuration file to create a reource group in the Azure Cloud 

Cloud Provider 
	Azure Provider 
		AzureRM
		AzureStack
		Azure Active Directory 
		
	https://registry.terraform.io/
	
Terraform Workflow 
------------------
init-->validate-->plan-->apply-->destroy

terraform init 
--------------
It is used to initialize a working directory containing terraform configuration files 
It also download's the required provider binary in the working directory 

terraform validate
------------------
It validates the terraform configuration file in the respective directory so that they syntantically valid and internally consistent

terraform plan 
--------------
Create a execution plan 
It performs a refresh and determine what actions are necessary to achieve the desired stated specified in the configuration file 

	terraform plan - this display execution plan on the terminal 
	
	terraform plan -out "plan1.tfplan" - this create an execution plan and store the same in the specified file 
	
terraform apply 
---------------
It is used to apply the changes required to reach the desired state of the configuration 
By default apply scans the current directory for the configuration and applies changes appropriately 

	terraform apply --> yes 
	
	terraform apply --auto-approve 
	
	terraform apply "plan1.tfplan" --auto-approve
	
terraform destroy 
-----------------
It is used to destroy the terraform managed infrastructure

	terraform destroy --> yes
	
	terraform destroy --auto-approve
	
Variables and Data Types 
------------------------

Variables in Terraform are a great way to define centrally controlled reusable values.
The information in Terraform variable is saved independently from the deployment plans, which makes the values easy to read and edit from a single file 

Types of Variables 
------------------
-Input Variables
-Output Variables
-Local Variables 

Terraform Data Types 
--------------------
Primitives 
	String 
	Numbers
	Boolean 

Collections
	List 
	Map
	
List 
----
[1,2,3,4] - valid list of numbers
["East US",West US","Central US"] - valid list of string 

[1,"East US",True] - Invalid List

variable "users"{
	type=list 
	default =["root","user1","user2"]
}

username = var.users[0]

Map
---
{
	"server1"= "Windows Server 2012"
	"server2"= "Windows Server 2022"
	"server3"= "Ubuntu Server 22.04"
}

variable "servers"{
	type=map
	default={
	"server1"= "Windows Server 2012"
	"server2"= "Windows Server 2022"
	"server3"= "Ubuntu Server 22.04"
	}
}

var.servers["server1"]  or var.servers.server1

Input Variables
---------------
It serves as parameter for Terraform module, so user can customize behaviour without edition the source config files 

The input variable can be create in the main.tf (file containing the actual config) or we can manage the variable in sperate file (variable.tf)

variable "name_label" {
	type = value #data type of variable 
	description ="value" #describes the variable 
	default = value #contains the value to be refered by the variable 
	sensitive = true | false
}

eg:- 

variable "storage_resource_group"{
	type=string 
	description="resource group"
	default = "terraform-training-rg"
}

var.storage_resource_group

Output Variables
----------------
It makes information about your infrastructure available on the command line and can expose information from othe terraform configuration to use 

output "name_label"{
	value = output_value
	description = "Description of output"
	sensitive =true | false 
}

output "storage_id"{
	value =  azurerm_storage_account.demostorage.id
	description ="Storage Account ID"
}

Local Values/Variables
----------------------
It provides a convinient way for assigning a short name to an expression

A local value assigns a name to an expression so you can use the name multiple times with a module or config instead of repeating the expression

locals {
	prefix = "ct"
	
	common_tags = {
		env="prod",
		version="2.0",
		company="ct"		
	}
}

local.<name_label>

.tfvars files - help us to provide values to variable that we are using in the configuration files 

By default, we can use the terraform.tfvars files to provide values for all the variables that we are using in the configuration files 

Import 
------
Terraform can import existing infrastructure resource.
This functionality lets you bring existing resource under Terraform management

Scenarios 
---------
You are working for ABC Corp , where you have build certain infrastructure on the Azure Cloud (VM, Storage Account, Resource Group....)

Now you team has started using Terraform to build infrastructure on the Azure Cloud , For new infrastructure they are able to manage the state and accordingly the updated the infrastructure 

But for the old infrastructure that was created manually using the Azure Portal, team is not able to manage it via the Terraform configuration

To solve the above issue we can make use of terraform import cli command which imports the state of infrastructure into tfstate files but the command does not generates the configuration for the same 

syntax

terraform import <resource> <id>

terraform import azurerm_storage_account.storageAcc1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourcegroup/providers/Microsoft.Storage/storageAccounts/myaccount

Use the following to command to import the state of the resource-group and the storage to your terraform configuration

Resource-Group 

terraform import azurerm_resource_group.myrg /subscriptions/a1dbe77b-da96-4e01-875c-f7b05a79eb93/resourceGroups/TerraformImportDemo-RG

Storage-Account 

terraform import azurerm_storage_account.mystorage /subscriptions/a1dbe77b-da96-4e01-875c-f7b05a79eb93/resourceGroups/TerraformImportDemo-RG/providers/Microsoft.Storage/storageAccounts/terraformdemo202455

Terraform State Command
-----------------------
The terraform state command is used for advanced state management


Remote State Management 
-----------------------
Terraform uses state whihch stores the information about your managed infrastructure and configuration 
This state is used by Terraform to map real world resources to your configuration, keeps track of Metadat and to improve performance of large infrastructure

This is state is store by default in a local file name "terraform.tfstate"

When you are working in a team, the state file be stored in a remote location which can one of the following 

	-Terraform Cloud 
	-Amazon S3
	-Azure Blob Storage 
	-Google Cloud Storage
	-Alibaba Cloud 
	
Terraform Graph Command
-----------------------
The terraform graph command produces description of relationship between object in terraform configuration using DOT language

By default the result is a simple graph which describes only the dependency ordering of the resources in the configuration

terraform graph 

terraform graph -type=plan | dot -Tpng > graph.png

Provisioner 
Module
Terraform Cloud 

Terraform Provisioner
---------------------
Terraform Provisioners are used for executing scripts or shell commands on a local or remote machine as a part of resource creation or deletion 

provisioner "local-exec"{
	
}

local-exec :- it help to execute commands on the local system

remote-exec :- it helps to execute commands on a remote system 

Modules 
-------
Modules are self-contained package of Terraform Configuration that are managed by a group 

Virtual Machine (Server)
	-Some Image 
	-Disk or Storage 
	-VNet , Subnet, NSGs, IP Address 
	
Terraform offer a lot Built-In Module to quick deploy the required infrastructure with the minimal required confiuration 

It also allows you to create your own custom module to simplify deployment of infrastructure for your project 


Custom Module 

Root Module 
	-main.tf
	-variables.tf 
	-ouputs.tf
		
	ResourceGroup 
		main.tf
		variables.tf
		outputs.tf 
	
	StorageAccount
		main.tf 
		variables.tf 
		outputs.tf 